// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/monitor/netmon.go

// Package monitor is a generated GoMock package.
package monitor

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMonitor is a mock of Monitor interface.
type MockMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor.
type MockMonitorMockRecorder struct {
	mock *MockMonitor
}

// NewMockMonitor creates a new mock instance.
func NewMockMonitor(ctrl *gomock.Controller) *MockMonitor {
	mock := &MockMonitor{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor) EXPECT() *MockMonitorMockRecorder {
	return m.recorder
}

// ChangeState mocks base method.
func (m *MockMonitor) ChangeState(state NetworkMonitoringState) NetworkMonitoringState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeState", state)
	ret0, _ := ret[0].(NetworkMonitoringState)
	return ret0
}

// ChangeState indicates an expected call of ChangeState.
func (mr *MockMonitorMockRecorder) ChangeState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeState", reflect.TypeOf((*MockMonitor)(nil).ChangeState), state)
}

// CheckNodes mocks base method.
func (m *MockMonitor) CheckNodes(now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNodes", now)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNodes indicates an expected call of CheckNodes.
func (mr *MockMonitorMockRecorder) CheckNodes(now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNodes", reflect.TypeOf((*MockMonitor)(nil).CheckNodes), now)
}

// NetworkOperatesStable mocks base method.
func (m *MockMonitor) NetworkOperatesStable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkOperatesStable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NetworkOperatesStable indicates an expected call of NetworkOperatesStable.
func (mr *MockMonitorMockRecorder) NetworkOperatesStable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkOperatesStable", reflect.TypeOf((*MockMonitor)(nil).NetworkOperatesStable))
}

// NetworkStatusInfo mocks base method.
func (m *MockMonitor) NetworkStatusInfo() NetworkStatusInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStatusInfo")
	ret0, _ := ret[0].(NetworkStatusInfo)
	return ret0
}

// NetworkStatusInfo indicates an expected call of NetworkStatusInfo.
func (mr *MockMonitorMockRecorder) NetworkStatusInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStatusInfo", reflect.TypeOf((*MockMonitor)(nil).NetworkStatusInfo))
}

// State mocks base method.
func (m *MockMonitor) State() NetworkMonitoringState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(NetworkMonitoringState)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockMonitorMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockMonitor)(nil).State))
}
